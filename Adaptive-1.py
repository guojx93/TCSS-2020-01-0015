# Wiki Network

import random
import copy
import math
import multiprocessing

def readGraph(path, p):
    neighbor = {}
    edges = {}
    nodes = set()
    f = open(path, 'r')
    for line in f.readlines():
        line = line.strip()
        if not len(line) or line.startswith('#'):
            continue
        row = line.split()
        src = int(row[0])
        dst = int(row[1])
        nodes.add(src)
        nodes.add(dst)
        if neighbor.get(src) is None:
            neighbor[src] = set()
        if neighbor.get(dst) is None:
            neighbor[dst] = set()
        edges[(min(src,dst), max(src,dst))] = p
        neighbor[src].add(dst)
        neighbor[dst].add(src)
    return Graph(nodes, edges, neighbor)

class Graph:
    nodes = None
    nodes_acceptance = {}
    edges = None
    neighbor = None
    node_num = None
    edge_num = None
    def __init__(self, nodes, edges, neighbor):
        self.nodes = nodes
        self.edges = edges
        self.neighbor = neighbor
        self.node_num = len(nodes)
        self.edge_num = len(edges)
        for node in self.nodes:
            self.nodes_acceptance[node] = random.random()
    def get_neighbor(self, node):
        itsNeighbor = self.neighbor.get(node)
        if itsNeighbor is None:
            return set()
        return self.neighbor[node]

def isHappened(prob):
    if prob == 1:
        return True
    if prob == 0:
        return False
    rand = random.random()
    if rand <= prob:
        return True
    else:
        return False

def adaptiveInvitation(graph, R, b, k):
    H = set()
    edge_realization = {}
    for edge in graph.edges:
        edge_realization[edge] = '?'
    user_participant = {}
    for v in graph.nodes:
        user_participant[v] = k + 1

    user_gain = {}
    for v in graph.nodes:
        user_gain[v] = compute(graph, R, k, edge_realization, user_participant, v)
    u1 = findMax(user_gain)
    H.add(u1)
    rand = random.random()
    if rand < graph.nodes_acceptance[u1]:
        user_participant[u1] = 0
        update(graph, edge_realization, user_participant, k, u1)
        del user_gain[u1]
        for v in (graph.nodes - H):
            if check(graph, 2 * k, u1, v):
                user_gain[v] = compute(graph, R, k, edge_realization, user_participant, v)
    else:
        del user_gain[u1]

    step = b / 6
    stat = {}

    for i in range(2, b + 1):
        ui = findMax(user_gain)
        H.add(ui)
        rand = random.random()
        if rand < graph.nodes_acceptance[ui]:
            user_participant[ui] = 0
            update(graph, edge_realization, user_participant, k, ui)
            del user_gain[ui]
            for v in (graph.nodes - H):
                if check(graph, 2 * k, ui, v):
                    user_gain[v] = compute(graph, R, k, edge_realization, user_participant, v)
        else:
            del user_gain[ui]
        if i % step == 0:
            profit = findProfit(user_participant, R)
            stat[i] = profit
            print(i)
    return stat

def findProfit(user_participant, R):
    profit = 0
    for user in user_participant:
        profit += R[user_participant[user]]
    return profit

def check(graph, dist, u, v):
    visited = set()
    curLevel = set()
    visited.add(v)
    curLevel.add(v)
    i = 0
    while len(curLevel) != 0 and i < dist:
        next = set()
        i += 1
        for node in curLevel:
            for neig in graph.get_neighbor(node):
                if neig not in visited:
                    if neig == u:
                        return True
                    next.add(neig)
                    visited.add(neig)
        curLevel = next
    return False

def update(graph, edge_realization, user_participant, k, u):
    curLevel = set()
    curLevel.add(u)
    i = 0
    while len(curLevel) != 0 and i < k:
        next = set()
        i += 1
        for node in curLevel:
            for neig in graph.get_neighbor(node):
                edge = (min(node, neig), max(node, neig))
                if edge_realization[edge] == 1:
                    if i < user_participant[neig]:
                        user_participant[neig] = i
                        next.add(neig)
                elif edge_realization[edge] == '?':
                    rand = random.random()
                    if rand < graph.edges[edge]:
                        edge_realization[edge] = 1
                        if i < user_participant[neig]:
                            user_participant[neig] = i
                            next.add(neig)
                    else:
                        edge_realization[edge] = 0
        curLevel = next
    return None

def findMax(user_gain):
    ui = 0
    max_gain = 0
    for node in user_gain:
        if user_gain[node] > max_gain:
            ui = node
            max_gain = user_gain[node]
    return ui

def compute(graph, R, k, edge_realization, user_participant, u):
    L = []
    S = set()
    S.add(u)
    L.append({u: 0})
    Delta = 0
    for i in range(1, k + 1):
        Vi = {}
        for v in L[i - 1]:
            for vPrime in graph.get_neighbor(v):
                if vPrime not in S:
                    Vi[vPrime] = 0
                    S.add(vPrime)
        L.append(Vi)
    L[0][u] = graph.nodes_acceptance[u]
    Delta += graph.nodes_acceptance[u] * (R[0] - R[user_participant[u]])
    for i in range(1, k + 1):
        for v in L[i]:
            t = 1
            for vPrime in graph.get_neighbor(v):
                if vPrime in L[i - 1]:
                    edge = (min(v, vPrime), max(v, vPrime))
                    if edge_realization[edge] == 1:
                        t *= (1 - L[i - 1][vPrime])
                    elif edge_realization[edge] == '?':
                        t *= (1 - graph.edges[edge] * L[i - 1][vPrime])
            L[i][v] = 1 - t
        for v in L[i]:
            if i < user_participant[v]:
                Delta += L[i][v] * (R[i] - R[user_participant[v]])
    return Delta

def randomm(graph, R, b, k):
    H = set()
    edge_realization = {}
    for edge in graph.edges:
        edge_realization[edge] = '?'
    user_participant = {}
    for v in graph.nodes:
        user_participant[v] = k + 1

    step = b / 6
    stat = {}
    candidate = list(graph.nodes)
    for i in range(1, b + 1):
        rand = random.randint(0, len(candidate) - 1)
        ui = candidate[rand]
        candidate.remove(ui)
        H.add(ui)
        rand = random.random()
        if rand < graph.nodes_acceptance[ui]:
            user_participant[ui] = 0
            update(graph, edge_realization, user_participant, k, ui)
        if i % step == 0:
            profit = findProfit(user_participant, R)
            stat[i] = profit
    return stat

def maxDegree(graph, R, b, k):
    H = set()
    edge_realization = {}
    for edge in graph.edges:
        edge_realization[edge] = '?'
    user_participant = {}
    for v in graph.nodes:
        user_participant[v] = k + 1

    node_degree = {}
    for node in graph.nodes:
        node_degree[node] = len(graph.get_neighbor(node))
    node_degree = sorted(node_degree.items(), key=lambda item: item[1], reverse=True)

    step = b / 6
    stat = {}

    for i in range(1, b + 1):
        ui = node_degree[i - 1][0]
        H.add(ui)
        rand = random.random()
        if rand < graph.nodes_acceptance[ui]:
            user_participant[ui] = 0
            update(graph, edge_realization, user_participant, k, ui)
        if i % step == 0:
            profit = findProfit(user_participant, R)
            stat[i] = profit
    return stat

def maxProb(graph, R, b, k):
    H = set()
    edge_realization = {}
    for edge in graph.edges:
        edge_realization[edge] = '?'
    user_participant = {}
    for v in graph.nodes:
        user_participant[v] = k + 1

    node_prob = copy.deepcopy(graph.nodes_acceptance)
    node_prob = sorted(node_prob.items(), key=lambda item: item[1], reverse=True)

    step = b / 6
    stat = {}

    for i in range(1, b + 1):
        ui = node_prob[i - 1][0]
        H.add(ui)
        rand = random.random()
        if rand < graph.nodes_acceptance[ui]:
            user_participant[ui] = 0
            update(graph, edge_realization, user_participant, k, ui)
        if i % step == 0:
            profit = findProfit(user_participant, R)
            stat[i] = profit
    return stat

def maxDegreeProb(graph, R, b, k):
    H = set()
    edge_realization = {}
    for edge in graph.edges:
        edge_realization[edge] = '?'
    user_participant = {}
    for v in graph.nodes:
        user_participant[v] = k + 1

    node_degree_prob = {}
    for node in graph.nodes:
        node_degree_prob[node] = len(graph.get_neighbor(node)) * graph.nodes_acceptance[node]
    node_degree_prob = sorted(node_degree_prob.items(), key=lambda item: item[1], reverse=True)

    step = b / 6
    stat = {}

    for i in range(1, b + 1):
        ui = node_degree_prob[i - 1][0]
        H.add(ui)
        rand = random.random()
        if rand < graph.nodes_acceptance[ui]:
            user_participant[ui] = 0
            update(graph, edge_realization, user_participant, k, ui)
        if i % step == 0:
            profit = findProfit(user_participant, R)
            stat[i] = profit
    return stat


if __name__ == '__main__':
    path = "soc-wiki-Vote.txt"
    graph = readGraph(path, 0.5)

    graph.nodes_acceptance = {1: 0.1354593449057625, 2: 0.14471357684824449, 3: 0.766686217062223, 4: 0.34732799816954096, 5: 0.8016329896761886,
     6: 0.5702598208540419, 7: 0.41002000166284724, 8: 0.3600762345766989, 9: 0.7718735792751397,
     10: 0.8023136939203129, 11: 0.26120028280658236, 12: 0.6280474215534063, 13: 0.29211013137432573,
     14: 0.8349129819487955, 15: 0.7817462783236271, 16: 0.010726742139446244, 17: 0.5341784783541799,
     18: 0.29367646024706673, 19: 0.6631834701649003, 20: 0.9903635049011865, 21: 0.543398505707824,
     22: 0.5398732105260202, 23: 0.5207477086883, 24: 0.100769524710135, 25: 0.22871374163497737,
     26: 0.10062073459243281, 27: 0.6328741522000934, 28: 0.5256745679254897, 29: 0.23195817995838874,
     30: 0.28590320180936657, 31: 0.7441324790046943, 32: 0.42281493297765993, 33: 0.6951201926847937,
     34: 0.591530757553329, 35: 0.9809330701226702, 36: 0.751466810580753, 37: 0.4987862192995851,
     38: 0.3962223147408711, 39: 0.7942108010227646, 40: 0.4023189972428399, 41: 0.14425344631442472,
     42: 0.25301773989315535, 43: 0.8536086538315775, 44: 0.7086154363344848, 45: 0.6544645758094804,
     46: 0.7993693271375392, 47: 0.1490937967915592, 48: 0.04562005169403527, 49: 0.2608358983861112,
     50: 0.8533219234417097, 51: 0.9686473748772401, 52: 0.03488405955139551, 53: 0.4641783374825863,
     54: 0.05403056581440535, 55: 0.6187674138600952, 56: 0.6225121141147405, 57: 0.44986455071921283,
     58: 0.9527933165979714, 59: 0.6702422049688518, 60: 0.7820147437613224, 61: 0.5879431403611992,
     62: 0.3025691358511361, 63: 0.10609803142738683, 64: 0.6136562050791349, 65: 0.7296109796471559,
     66: 0.7785600192467058, 67: 0.5638746632944548, 68: 0.7966438897986307, 69: 0.6691051592991489,
     70: 0.7127851720470226, 71: 0.24655971938785204, 72: 0.1822063219983059, 73: 0.3374779047544918,
     74: 0.7071492830955374, 75: 0.5671900387875074, 76: 0.7013799600753647, 77: 0.18073053869736966,
     78: 0.24836932188456085, 79: 0.6938985327877393, 80: 0.18428599149629465, 81: 0.32838166071946073,
     82: 0.9689850578118115, 83: 0.1274820146258977, 84: 0.7756300447879922, 85: 0.9887225040665231,
     86: 0.6906660979484175, 87: 0.46377959932887614, 88: 0.33471250670102126, 89: 0.6442996794086899,
     90: 0.23562287447383556, 91: 0.6011325058400915, 92: 0.7078212628061793, 93: 0.6094609230324944,
     94: 0.3074112171901595, 95: 0.6489553390514525, 96: 0.365521418105509, 97: 0.02852548788897369,
     98: 0.1661092060431678, 99: 0.8423999056918681, 100: 0.5137248215687665, 101: 0.928501682692369,
     102: 0.46592451218397035, 103: 0.25112003717839515, 104: 0.20633497338526352, 105: 0.9008686544985414,
     106: 0.5580043151820882, 107: 0.3130214409397276, 108: 0.3429812561132125, 109: 0.4610306151182927,
     110: 0.5654680092419172, 111: 0.20317978364888567, 112: 0.9686713344890406, 113: 0.7883013049067633,
     114: 0.9286292389188752, 115: 0.2495688059575999, 116: 0.3054979825950943, 117: 0.13774671606949596,
     118: 0.817836822816782, 119: 0.07069752565510146, 120: 0.01852785173795446, 121: 0.578339923915474,
     122: 0.21148368216410862, 123: 0.5388500147576427, 124: 0.9217917521162874, 125: 0.9603502848274019,
     126: 0.299090397507663, 127: 0.7060388278296377, 128: 0.4066545345073618, 129: 0.8378451235588585,
     130: 0.9965570037650869, 131: 0.3515994135248177, 132: 0.5016554902057261, 133: 0.06582119058635971,
     134: 0.5425872022903512, 135: 0.18026112559906993, 136: 0.6351355725213732, 137: 0.750235861113475,
     138: 0.11222526599826677, 139: 0.2274809936155987, 140: 0.8224538237176862, 141: 0.4960697126857676,
     142: 0.6486456265940412, 143: 0.7508235848694712, 144: 0.3526255739858196, 145: 0.24239592723051717,
     146: 0.7575825416685356, 147: 0.44591882510966663, 148: 0.3394017263287452, 149: 0.6473540738701883,
     150: 0.7812256670521508, 151: 0.5422236802259264, 152: 0.5873766321186357, 153: 0.9949074101484744,
     154: 0.8160763467712059, 155: 0.13442084545032262, 156: 0.7628377016317283, 157: 0.4548296932048014,
     158: 0.6266269861819996, 159: 0.25303941869580715, 160: 0.025444177596533724, 161: 0.6275229303577406,
     162: 0.9128395395337925, 163: 0.6637738163663192, 164: 0.2528014809888296, 165: 0.5112844382799148,
     166: 0.2561988936473243, 167: 0.2199512183082829, 168: 0.6233755316614795, 169: 0.5274781647712251,
     170: 0.7633437359764831, 171: 0.12423931942812372, 172: 0.8526683223153209, 173: 0.13881793914171814,
     174: 0.9059503202211635, 175: 0.7045219589060272, 176: 0.14215470760218063, 177: 0.8060318743830341,
     178: 0.8981051139398466, 179: 0.5804933507886321, 180: 0.9704661764415782, 181: 0.1057500515958022,
     182: 0.8632671746437244, 183: 0.5670357709847778, 184: 0.29076878163713693, 185: 0.46918048104096444,
     186: 0.20491488596298746, 187: 0.14331643518533244, 188: 0.461836248019892, 189: 0.8772042015415383,
     190: 0.3345503851749587, 191: 0.10657988541836538, 192: 0.21557809748029433, 193: 0.4408100168737261,
     194: 0.5834883311340407, 195: 0.27506077191090716, 196: 0.4750500114037306, 197: 0.595976154566522,
     198: 0.6461622168067804, 199: 0.8401376011792351, 200: 0.0847966631650735, 201: 0.39995859423921953,
     202: 0.8853645204604697, 203: 0.26906746919678914, 204: 0.9087356311732525, 205: 0.44359275882494464,
     206: 0.39505443819124675, 207: 0.3108771220584211, 208: 0.6611158278859677, 209: 0.10895639597806506,
     210: 0.4172668668076229, 211: 0.6114543512137024, 212: 0.6440821996244871, 213: 0.543558690176965,
     214: 0.8884788249902108, 215: 0.4895423044865247, 216: 0.8354783607593648, 217: 0.2887474616652276,
     218: 0.755109091112833, 219: 0.008584450079169081, 220: 0.8006529999747622, 221: 0.3139740193651769,
     222: 0.9973475954664459, 223: 0.5319858330904927, 224: 0.6943672065957494, 225: 0.32616639302422035,
     226: 0.6944209107826042, 227: 0.7860857645206386, 228: 0.32183903216988097, 229: 0.4721443954313078,
     230: 0.34669833672649986, 231: 0.2817941591933083, 232: 0.9381518305307771, 233: 0.36967061710401217,
     234: 0.8849417045469999, 235: 0.21472428554176115, 236: 0.9747215354075252, 237: 0.38787709013584115,
     238: 0.06602022849051525, 239: 0.6678242193977115, 240: 0.3437030213866693, 241: 0.03150873990851488,
     242: 0.319157679816065, 243: 0.7893791015960817, 244: 0.9254465901622442, 245: 0.6990207671638707,
     246: 0.846143461726753, 247: 0.7756746515406235, 248: 0.1554510944337545, 249: 0.11475764632523,
     250: 0.009311681051433318, 251: 0.8624778563076476, 252: 0.4075084905154228, 253: 0.5538633716883742,
     254: 0.5065189491394864, 255: 0.7591442209693258, 256: 0.5100838450553269, 257: 0.9403843293062984,
     258: 0.12476353464190748, 259: 0.9255589645077099, 260: 0.467632320584654, 261: 0.6341775526288795,
     262: 0.4163432044275558, 263: 0.6528107761764386, 264: 0.2143705587149689, 265: 0.8290322262557482,
     266: 0.7403949163183838, 267: 0.09551174977269439, 268: 0.9739771348237366, 269: 0.0824333813733672,
     270: 0.7325970526106264, 271: 0.34218086857768193, 272: 0.6556092697264229, 273: 0.08844422301812571,
     274: 0.34048160739690514, 275: 0.6139167215342112, 276: 0.22456706930769854, 277: 0.7037353099155368,
     278: 0.38682418699803056, 279: 0.8926076989120724, 280: 0.5106337162922596, 281: 0.21888227624455292,
     282: 0.6280585733706485, 283: 0.8548707128535624, 284: 0.6917252515521143, 285: 0.693971157054246,
     286: 0.9017041339852506, 287: 0.42140599827587844, 288: 0.4819946232187491, 289: 0.3142589134824173,
     290: 0.0934109788240799, 291: 0.4630626477319687, 292: 0.41310728967611476, 293: 0.9528438446735237,
     294: 0.6420968762709942, 295: 0.2570376327774435, 296: 0.3508497059527418, 297: 0.33590099790932415,
     298: 0.8516638120040695, 299: 0.41794915432582136, 300: 0.1676473167168986, 301: 0.9165989811119919,
     302: 0.48842647872872735, 303: 0.40420295955977037, 304: 0.8834953787068294, 305: 0.04670695658063906,
     306: 0.7842168195251853, 307: 0.5051850788485295, 308: 0.5092395137867949, 309: 0.31894089954359406,
     310: 0.519426542201391, 311: 0.5240470864276058, 312: 0.007193595964842481, 313: 0.894917859382125,
     314: 0.9904679038785486, 315: 0.21399382603372297, 316: 0.040813214433713996, 317: 0.5787717918922951,
     318: 0.6574608529258619, 319: 0.6321202355806228, 320: 0.22365322938498122, 321: 0.5828165494631662,
     322: 0.9625063970483757, 323: 0.9030350592675345, 324: 0.3767004473557609, 325: 0.21988950234845228,
     326: 0.10204979705575612, 327: 0.18400160995279669, 328: 0.47200963922002315, 329: 0.31388747767092406,
     330: 0.13172701478808146, 331: 0.8504909802738495, 332: 0.20320090191777418, 333: 0.04777754248851718,
     334: 0.5461279883033716, 335: 0.05645769326485173, 336: 0.6987795038820792, 337: 0.8199689894611716,
     338: 0.1811002730053467, 339: 0.03290009337616984, 340: 0.25087235744525216, 341: 0.9414699607841814,
     342: 0.5179969034893231, 343: 0.910475061296436, 344: 0.3413481661895771, 345: 0.46631566097051214,
     346: 0.49304294833539697, 347: 0.7245840265104228, 348: 0.2646346862545118, 349: 0.699384096611188,
     350: 0.9706933804790623, 351: 0.8338395155155751, 352: 0.33056392144970326, 353: 0.866781878319842,
     354: 0.962083327744582, 355: 0.44019985436114084, 356: 0.65529209565806, 357: 0.9100343195986675,
     358: 0.5988879970525203, 359: 0.38381091122191036, 360: 0.6537140743910574, 361: 0.6262840138741651,
     362: 0.2593950840494136, 363: 0.7278606186261916, 364: 0.9720104085170291, 365: 0.43359861539107414,
     366: 0.3704529647614727, 367: 0.8614167604538425, 368: 0.16222214232522636, 369: 0.1781606303297334,
     370: 0.908662533959332, 371: 0.7992036602372227, 372: 0.7042053592961184, 373: 0.6545545750961524,
     374: 0.9221242551022155, 375: 0.42954352247394256, 376: 0.3426362442623757, 377: 0.7312181421800543,
     378: 0.6684663249909754, 379: 0.9168264503471442, 380: 0.8062268824826494, 381: 0.8561369186841586,
     382: 0.9370165245327371, 383: 0.3116569930501216, 384: 0.5312735889749081, 385: 0.3061506030996616,
     386: 0.5365297195339324, 387: 0.7503437776831081, 388: 0.29911337842845764, 389: 0.282905545642547,
     390: 0.3082375622211676, 391: 0.07128829034703454, 392: 0.8320925626246528, 393: 0.5289407233612949,
     394: 0.1922940253341867, 395: 0.3532593014498402, 396: 0.874836569788074, 397: 0.6779712855409953,
     398: 0.5823043081172101, 399: 0.5513698446003764, 400: 0.4191615268516964, 401: 0.7792538421732756,
     402: 0.26067350326868244, 403: 0.8330440876034687, 404: 0.7807685943638902, 405: 0.03722212124918034,
     406: 0.6759024148487136, 407: 0.2157308256836421, 408: 0.7930263913093417, 409: 0.7129633115666065,
     410: 0.0414898996574149, 411: 0.39146638207318696, 412: 0.40937959755552267, 413: 0.882784483272981,
     414: 0.7310346951427518, 415: 0.7057857995149749, 416: 0.3737075421986439, 417: 0.4084062781205545,
     418: 0.2983572289002486, 419: 0.03289324905338398, 420: 0.2160549521488052, 421: 0.2233872484978362,
     422: 0.7431451208430215, 423: 0.5279845685371344, 424: 0.43575225140392126, 425: 0.8966429640113391,
     426: 0.3786824691656764, 427: 0.22051579039591684, 428: 0.9702260621349886, 429: 0.9545958246807138,
     430: 0.4299671869517343, 431: 0.8501217251363514, 432: 0.8537460250952625, 433: 0.051796859720798394,
     434: 0.8400197520916092, 435: 0.72042201338776, 436: 0.16439017162748626, 437: 0.7890415103439036,
     438: 0.08829722609835255, 439: 0.45485590359801864, 440: 0.9673968626953483, 441: 0.49168809415776293,
     442: 0.3114260240238723, 443: 0.34765254552465175, 444: 0.6810951289574001, 445: 0.683163575523581,
     446: 0.8106285693100876, 447: 0.6196324948471081, 448: 0.22152285725073462, 449: 0.9829330908607259,
     450: 0.8876852480352859, 451: 0.47259812907258925, 452: 0.18657602466891132, 453: 0.49367660362722754,
     454: 0.2475705487225195, 455: 0.874380661494783, 456: 0.9256027837391833, 457: 0.6157743709497546,
     458: 0.9976266854209406, 459: 0.7230447080478317, 460: 0.2549669709139646, 461: 0.3157504619460799,
     462: 0.5848028357252054, 463: 0.6497817310191666, 464: 0.6078821687166028, 465: 0.4809379045445584,
     466: 0.7193512479573925, 467: 0.07224931096182374, 468: 0.3567616124557458, 469: 0.587104775588239,
     470: 0.9608159807944859, 471: 0.048892072593982316, 472: 0.10492944088745548, 473: 0.9510305208458724,
     474: 0.9103687029207457, 475: 0.9980519097742026, 476: 0.3972071566936082, 477: 0.31693235422603083,
     478: 0.3711855445905723, 479: 0.7558945801538485, 480: 0.8028021109656355, 481: 0.7213733511793701,
     482: 0.06868002203998691, 483: 0.9766028003629127, 484: 0.7881189328667781, 485: 0.06856514551547155,
     486: 0.3062775500297912, 487: 0.5103623300019462, 488: 0.21134804546702846, 489: 0.03265300738713117,
     490: 0.6277294260790927, 491: 0.9318618402536168, 492: 0.027585668768377425, 493: 0.05975615521110733,
     494: 0.841419936821136, 495: 0.9475268575036626, 496: 0.2964951642527539, 497: 0.8908499620067621,
     498: 0.8929669244074, 499: 0.28480941306909147, 500: 0.46472772824556874, 501: 0.10918146516924365,
     502: 0.9988162527407022, 503: 0.4023243482024499, 504: 0.031566787709878974, 505: 0.15841849938006125,
     506: 0.4628631165707826, 507: 0.8235734108224523, 508: 0.9284726859392756, 509: 0.5429924222549917,
     510: 0.18231803997294804, 511: 0.7493562625515432, 512: 0.4343009118354546, 513: 0.28539153585361654,
     514: 0.6915901921720665, 515: 0.6327882845700145, 516: 0.84393352825185, 517: 0.42523803918509295,
     518: 0.5424479317118924, 519: 0.30979372932689864, 520: 0.3404300728577122, 521: 0.15544739016402354,
     522: 0.42067328318071595, 523: 0.04284627993319101, 524: 0.7965529744925426, 525: 0.5364358494950857,
     526: 0.5086380655724073, 527: 0.08912986031753645, 528: 0.41906821877444544, 529: 0.41958999041935585,
     530: 0.19025712550697937, 531: 0.044846437158234775, 532: 0.49038714504720815, 533: 0.8671370789408887,
     534: 0.2933170898663131, 535: 0.7154715610269194, 536: 0.14831809198379087, 537: 0.7146646385705172,
     538: 0.5656025778322111, 539: 0.5268561592104675, 540: 0.8825821421169479, 541: 0.37401810045797346,
     542: 0.4737593974426494, 543: 0.5221556289353072, 544: 0.3989956953232541, 545: 0.40967470814259244,
     546: 0.03862721065165042, 547: 0.7052459701208615, 548: 0.8842607787555705, 549: 0.8888358266331912,
     550: 0.9043812270620517, 551: 0.8321585080944043, 552: 0.04734346674829082, 553: 0.4040771939449136,
     554: 0.24683983617095517, 555: 0.10930167020799875, 556: 0.921606045431129, 557: 0.2864827034245129,
     558: 0.5786918723675301, 559: 0.18729234048930588, 560: 0.6120886337031849, 561: 0.22140922266174434,
     562: 0.3723385451114829, 563: 0.6993635661409732, 564: 0.2488651181969238, 565: 0.18391203246976373,
     566: 0.8339575962393332, 567: 0.15182196964568406, 568: 0.19454894987787352, 569: 0.9083829459486479,
     570: 0.49950159994299126, 571: 0.21001541348146258, 572: 0.0008892456075390021, 573: 0.6748250462774746,
     574: 0.13172302678329506, 575: 0.9437237656459276, 576: 0.07553175328931028, 577: 0.7972140391249785,
     578: 0.6582321959626085, 579: 0.07166631004691149, 580: 0.9153544079482004, 581: 0.14954214590534665,
     582: 0.01898626402423098, 583: 0.27106826592277644, 584: 0.16642754049997988, 585: 0.9664318415395395,
     586: 0.6625982170518979, 587: 0.32024186950496725, 588: 0.6676067655477556, 589: 0.11537861863646459,
     590: 0.124158041071731, 591: 0.4280372773954768, 592: 0.8529485820947275, 593: 0.06287246997674756,
     594: 0.9998951937076649, 595: 0.4654002773334912, 596: 0.2583998341413285, 597: 0.6443953062419293,
     598: 0.2726778140569531, 599: 0.10287445307604448, 600: 0.4755199488413392, 601: 0.8679239452449503,
     602: 0.6090926242244218, 603: 0.5408771099247731, 604: 0.9641494320127799, 605: 0.2618590254426201,
     606: 0.15783901309851334, 607: 0.7133281724921134, 608: 0.9486394370221907, 609: 0.5333428550084087,
     610: 0.9210076499791122, 611: 0.2861009113594578, 612: 0.6489160008234253, 613: 0.46465166630196,
     614: 0.02552368216868739, 615: 0.9918289193966401, 616: 0.6884003888179419, 617: 0.1667666543089451,
     618: 0.8360287494017122, 619: 0.9541906707685568, 620: 0.024706777150722004, 621: 0.5906712994067393,
     622: 0.01406257946082956, 623: 0.47035257166649536, 624: 0.8194317295012828, 625: 0.8130199490581247,
     626: 0.3052688385699889, 627: 0.5766031351591593, 628: 0.6690454245178569, 629: 0.28813680945409215,
     630: 0.4186401726832796, 631: 0.349944580012183, 632: 0.3241157896561401, 633: 0.6537131566991753,
     634: 0.5366292803640015, 635: 0.8557432298313785, 636: 0.29931395678520223, 637: 0.36081134255612735,
     638: 0.5972311163987102, 639: 0.9397590372610305, 640: 0.8900575230873748, 641: 0.4152818436926612,
     642: 0.4743317753932532, 643: 0.2720124048795348, 644: 0.608003624543942, 645: 0.564317071090628,
     646: 0.047928671208879225, 647: 0.03357638212566805, 648: 0.39032005856737473, 649: 0.48609368594954816,
     650: 0.8486926997271422, 651: 0.9268017078540695, 652: 0.4987129872836106, 653: 0.13912459150136736,
     654: 0.8086018325913349, 655: 0.20609548859099203, 656: 0.8777618249660645, 657: 0.2431020748352799,
     658: 0.7070672653109622, 659: 0.7949997848565264, 660: 0.22436917635223141, 661: 0.45018056054110234,
     662: 0.8027931449222682, 663: 0.40556526519482317, 664: 0.9224914941094567, 665: 0.005349853054187226,
     666: 0.9269192870710786, 667: 0.9122832928022258, 668: 0.7965094167595022, 669: 0.48418569445872817,
     670: 0.6245636751253277, 671: 0.8190525263058253, 672: 0.5445376192898911, 673: 0.018817470492272892,
     674: 0.251023726866622, 675: 0.5713196073022905, 676: 0.8748550890670277, 677: 0.8943443287901797,
     678: 0.576259239779095, 679: 0.3348054538243136, 680: 0.2763683373162644, 681: 0.7265302354913336,
     682: 0.6055920594734737, 683: 0.8660245344323242, 684: 0.7451202244709567, 685: 0.3120659902362267,
     686: 0.16581760400214973, 687: 0.591828679702938, 688: 0.8301554781868755, 689: 0.09439426229607895,
     690: 0.8639950937054094, 691: 0.7416776052079047, 692: 0.42432284890803074, 693: 0.5631058681750568,
     694: 0.05758350838827386, 695: 0.6884312049891028, 696: 0.6228998044655344, 697: 0.13630753269537588,
     698: 0.03137557898014731, 699: 0.20542926070433132, 700: 0.5249386044400901, 701: 0.8094883495678582,
     702: 0.3796153648145322, 703: 0.9589367154367682, 704: 0.7229446777492703, 705: 0.36718047374008667,
     706: 0.010690316359766028, 707: 0.32739598577451456, 708: 0.16842185959670108, 709: 0.47935118583956937,
     710: 0.7568586571777332, 711: 0.9642982866316362, 712: 0.9584835103234072, 713: 0.21390316728315795,
     714: 0.7898898331983556, 715: 0.48903025368764674, 716: 0.4502346566009746, 717: 0.5314725078886697,
     718: 0.9469993003741142, 719: 0.4832983402726033, 720: 0.6221746229665697, 721: 0.8585787583203801,
     722: 0.19214342288684805, 723: 0.21524499014312914, 724: 0.4112372538575475, 725: 0.1501454280105231,
     726: 0.742220506284205, 727: 0.2923422494125424, 728: 0.9098233277439847, 729: 0.21116645369207443,
     730: 0.19721796597850572, 731: 0.755089438816989, 732: 0.05359011499002608, 733: 0.44995888284143293,
     734: 0.5608270885032803, 735: 0.1508742394317082, 736: 0.6871645013468773, 737: 0.2013476942884852,
     738: 0.7256833168253729, 739: 0.47823751422784977, 740: 0.6256832813726235, 741: 0.9373204780177721,
     742: 0.46657299925130713, 743: 0.7251208495542608, 744: 0.8961229827431805, 745: 0.37313855313719546,
     746: 0.11383731613509651, 747: 0.12526440439541442, 748: 0.5071522288683478, 749: 0.24784432207521123,
     750: 0.1794414164044924, 751: 0.3307754378495319, 752: 0.13396809473141802, 753: 0.4915758244020568,
     754: 0.5247917303842438, 755: 0.417587470763636, 756: 0.7291026018637197, 757: 0.647948620393558,
     758: 0.4181579456882514, 759: 0.011810360631896555, 760: 0.7263752391723303, 761: 0.903038864543076,
     762: 0.19069461161104773, 763: 0.09826635035549158, 764: 0.48657440711291855, 765: 0.17241829775427298,
     766: 0.7963698586037385, 767: 0.5898374753480142, 768: 0.9297818110188817, 769: 0.7668956512999994,
     770: 0.10458215037079388, 771: 0.7023529284478188, 772: 0.5974192062158042, 773: 0.23796352699886458,
     774: 0.6086643188507138, 775: 0.026809797265603175, 776: 0.35161681422607993, 777: 0.6427777282294321,
     778: 0.8959122814476601, 779: 0.5595682342982264, 780: 0.09199844395964729, 781: 0.33140297708555966,
     782: 0.5185938983223631, 783: 0.19572121390868902, 784: 0.8227172890408188, 785: 0.45693898079797,
     786: 0.41564069375355106, 787: 0.8935851456191031, 788: 0.2152668051630786, 789: 0.36411670812469654,
     790: 0.18472641536535972, 791: 0.020648317415057904, 792: 0.21694019109282647, 793: 0.8028480301400175,
     794: 0.9726969872395388, 795: 0.9531632302834636, 796: 0.004121193311742322, 797: 0.48783892872236967,
     798: 0.15212613484781912, 799: 0.05842736100310064, 800: 0.7427719331872115, 801: 0.9770008058686193,
     802: 0.9531158905987165, 803: 0.579111737193412, 804: 0.8131201425559683, 805: 0.6975745163182081,
     806: 0.1699512605812189, 807: 0.3591518733709198, 808: 0.7496501497405592, 809: 0.3665086850378736,
     810: 0.48851976626090066, 811: 0.9050620897631976, 812: 0.6550955941133658, 813: 0.486982735544885,
     814: 0.10557892073410402, 815: 0.383993738090212, 816: 0.3995482954615476, 817: 0.23785474975800747,
     818: 0.4350215843596664, 819: 0.4589016871545848, 820: 0.7370173010644595, 821: 0.5853618472298923,
     822: 0.8828323414118101, 823: 0.2651924648575017, 824: 0.6319958430714947, 825: 0.6547548392437837,
     826: 0.7603981840975249, 827: 0.24672768980856374, 828: 0.9538775241383736, 829: 0.44502295975663275,
     830: 0.6659900563753886, 831: 0.11861704384351701, 832: 0.40906692617562046, 833: 0.8562064165260211,
     834: 0.29799367426795376, 835: 0.22052921459638797, 836: 0.3168556277602975, 837: 0.2696702209083315,
     838: 0.29640628306808137, 839: 0.5090712606348633, 840: 0.06155649181032974, 841: 0.18199225982781853,
     842: 0.42500822403570826, 843: 0.6365377286747411, 844: 0.0016077315903550993, 845: 0.6203265183107004,
     846: 0.3976430107501998, 847: 0.4993115923814473, 848: 0.4215339115652048, 849: 0.6472134850173066,
     850: 0.5567093876589551, 851: 0.4109911573703573, 852: 0.3648787314010207, 853: 0.17296719477980338,
     854: 0.5217461729966972, 855: 0.8533584574642609, 856: 0.11871598557048457, 857: 0.4778739530606355,
     858: 0.709381813563879, 859: 0.8936303126037282, 860: 0.4523234114226605, 861: 0.7581173171291423,
     862: 0.774334659571798, 863: 0.5754055563999804, 864: 0.24802845881674673, 865: 0.32983519137156303,
     866: 0.7320887781955027, 867: 0.2560648085835272, 868: 0.8174065596161211, 869: 0.3303587698556767,
     870: 0.007003290378568505, 871: 0.03954977183131103, 872: 0.13854265572001068, 873: 0.28862137895362305,
     874: 0.5264251363315106, 875: 0.4348006931084708, 876: 0.46729413698864686, 877: 0.9399372564528868,
     878: 0.4263081889847131, 879: 0.7388258153484354, 880: 0.11711753240259382, 881: 0.6981564083070988,
     882: 0.4278635059015874, 883: 0.40003463556896934, 884: 0.3271242661667456, 885: 0.913647678030271,
     886: 0.760337427674173, 887: 0.9185640833162877, 888: 0.38605214490284656, 889: 0.149002596068059}

    R = [8, 6, 4, 2, 0]
    t = 50
    listt = []
    b = 120
    for i in range(1, t + 1):
        print("times = " + str(i))
        statistics = maxDegreeProb(graph, R, b, 3)
        listt.append(statistics)
        print(statistics)
    step = b / 6
    average = {}
    for i in range(1, 7):
        k = int(step * i)
        sum = 0
        for statistics in listt:
            sum += statistics[k]
        average[k] = sum / t
    print("average = " + str(average))
    std = {}
    for i in range(1, 7):
        k = int(step * i)
        sum = 0
        for statistics in listt:
            sum += (statistics[k] - average[k])**2
        std[k] = math.sqrt(sum / t)
    print("std = " + str(std))


